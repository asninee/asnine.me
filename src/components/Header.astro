---
import { Image } from 'astro:assets'
import { getEntry } from 'astro:content'
import logo from '../../public/favicon.svg'
import BackLink from './BackLink.astro'

const pathname = Astro.url.pathname
const pagename = pathname.match(/\/([^\/]+)\/?$/ || [])?.[1]
const isPost = pathname.includes('/blog/') && !pathname.endsWith('/blog/')
const post = isPost && (await getEntry('blog', pagename))
---

<header
  data-header
  class='z-50 py-4 px-[5vw] [--progressive-blur-height:16px] fixed inset-x-0 top-0 before:z-[-1] before:absolute before:inset-x-0 before:top-0 before:-bottom-[--progressive-blur-height] before:pointer-events-none before:backdrop-blur-[10px] before:bg-[linear-gradient(to_bottom,var(--background-header),var(--background-header)_calc(100%-var(--progressive-blur-height)),transparent_calc(100%-var(--progressive-blur-height)))] before:[mask-image:linear-gradient(to_bottom,black_calc(100%-var(--progressive-blur-height)),transparent)]'
>
  <div
    class='flex items-center justify-between w-full h-5 mx-auto max-w-[44rem] flex-nowrap'
  >
    <div class='flex items-center gap-[22px]'>
      {
        pathname === '/' ? (
          <div class='flex md:pt-0.5 items-center gap-1.5'>
            <Image
              loading='eager'
              width='16'
              height='16'
              src={logo}
              alt='Site logo'
            />
            <span class='leading-none font-semibold text-sm'>asnine</span>
          </div>
        ) : isPost ? (
          <div class='flex items-center gap-9'>
            <BackLink href='/blog' />
            <p class='font-semibold'>{pagename.replaceAll('-', ' ')}</p>
          </div>
        ) : (
          <div class='flex items-center gap-9'>
            <BackLink href='/' />
            <p class='font-semibold'>{pagename}</p>
          </div>
        )
      }
    </div>
    {
      isPost && (
        <>
          {post?.data.updated ? (
            <div class='flex items-center gap-1'>
              <small class='px-1 -my-2 rounded-md font-semibold bg-neutral-200 dark:bg-neutral-800'>
                updated
              </small>
              <small class='text-l/sec dark:text-d/sec'>
                {new Intl.DateTimeFormat('en-GB').format(post.data.updated)}
              </small>
            </div>
          ) : (
            <div class='flex items-center gap-1'>
              <small class='px-1 -my-2 rounded-md font-semibold bg-neutral-200 dark:bg-neutral-800'>
                published
              </small>
              <small class='text-l/sec dark:text-d/sec'>
                {new Intl.DateTimeFormat('en-GB').format(post?.data.published)}
              </small>
            </div>
          )}
        </>
      )
    }
  </div>
</header>
